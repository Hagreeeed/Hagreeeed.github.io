// src/pages/Home.jsx
import { useState, useEffect } from 'react';
import GoalCard from '../components/GoalCard';
import Timer from '../components/Timer';

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —Ü—ñ–ª–µ–π
const initialGoals = [
  {
    id: 1,
    title: "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
    description: "–†–µ–≥—É–ª—è—Ä–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ñ–æ—Ä–º–∏.",
    deadline: "31.10.2025",
    image: "https://images.groosha.ua/medialibrary/37d/gde_luchshe_raspolozhit_sportzal_v_chastnom_dome_0.jpg",
    status: "active",
    subgoals: [
      { id: 1, text: "10 —Ö–≤–∏–ª–∏–Ω —Ä–æ–∑–º–∏–Ω–∫–∏", completed: false },
      { id: 2, text: "30 —Ö–≤–∏–ª–∏–Ω –±—ñ–≥—É", completed: false },
      { id: 3, text: "20 —Ö–≤–∏–ª–∏–Ω —Å–∏–ª–æ–≤–∏—Ö –≤–ø—Ä–∞–≤", completed: false }
    ]
  },
  {
    id: 2,
    title: "–ß–∏—Ç–∞–Ω–Ω—è",
    description: "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 1 –∫–Ω–∏–≥—É –Ω–∞ –º—ñ—Å—è—Ü—å.",
    deadline: "30.11.2025",
    image: "https://ps.informator.ua/wp-content/uploads/2024/09/read.jpg",
    subgoals: [
      { id: 1, text: "–û–±—Ä–∞—Ç–∏ –∫–Ω–∏–≥—É", completed: false },
      { id: 2, text: "–ß–∏—Ç–∞—Ç–∏ 20 —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –Ω–∞ –¥–µ–Ω—å", completed: false }
    ]
  },
  {
    id: 3,
    title: "–í–∏–≤—á–µ–Ω–Ω—è –º–æ–≤–∏",
    description: "–í–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É —â–æ–¥–Ω—è.",
    deadline: "31.10.2025",
    image: "https://zmina.info/wp-content/uploads/2023/04/csm_adobestock_139574720_60248a8925-e1681455234304.jpeg",
    subgoals: [
      { id: 1, text: "10 –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–∞ –¥–µ–Ω—å", completed: false },
      { id: 2, text: "–ü–µ—Ä–µ–≥–ª—è–¥ 1 –≤—ñ–¥–µ–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é", completed: false }
    ]
  },
  {
    id: 4,
    title: "CheckList",
    description: "–°–ø—Ä–∞–≤–∏ –Ω–∞ –¥–µ–Ω—å.",
    deadline: "31.10.2025",
    image: "https://www.ldatschool.ca/wp-content/uploads/2014/09/shutterstock_410527213.jpg",
    subgoals: [
      { id: 1, text: "–í–∏–≥—É–ª—è—Ç–∏ —Å–æ–±–∞–∫—É", completed: false },
      { id: 2, text: "–ü—Ä–∏–±—Ä–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É", completed: false }
    ]
  },
];

const Home = () => {
  const [goals, setGoals] = useState(() => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ü—ñ–ª—ñ –∑ localStorage
    const savedGoals = localStorage.getItem('goals');
    return savedGoals ? JSON.parse(savedGoals) : initialGoals;
  });
  const [filter, setFilter] = useState('all');
  const [searchQuery] = useState('');

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–ª—ñ –≤ localStorage –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ
  useEffect(() => {
    localStorage.setItem('goals', JSON.stringify(goals));
  }, [goals]);

  const toggleSubgoal = (goalId, subgoalId) => {
    setGoals(goals.map(goal => {
      if (goal.id === goalId) {
        const updatedSubgoals = goal.subgoals.map(subgoal => 
          subgoal.id === subgoalId 
            ? { ...subgoal, completed: !subgoal.completed } 
            : subgoal
        );
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        const isCompleted = updatedSubgoals.every(subgoal => subgoal.completed);
        const newStatus = isCompleted ? 'completed' : goal.status;
        
        return {
          ...goal,
          subgoals: updatedSubgoals,
          status: newStatus
        };
      }
      return goal;
    }));
  };

  const updateGoalStatus = (goalId, updates) => {
    setGoals(goals.map(goal => 
      goal.id === goalId ? { ...goal, ...updates } : goal
    ));
  };

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –ø–æ—à—É–∫
  const filteredGoals = goals
    .filter(goal => {
      if (filter === 'active') return goal.status === 'active';
      if (filter === 'completed') return goal.status === 'completed';
      if (filter === 'postponed') return goal.status === 'postponed';
      return true;
    })
    .filter(goal => {
      if (!searchQuery) return true;
      const query = searchQuery.toLowerCase();
      return (
        goal.title.toLowerCase().includes(query) ||
        goal.description.toLowerCase().includes(query)
      );
    });

  return (
    <>
      <section className="hero">
        <div className="hero-content">
          <h2>–î–æ—Å—è–≥–∞–π —Å–≤–æ—ó—Ö —Ü—ñ–ª–µ–π —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏!</h2>
          <p>–ü–ª–∞–Ω—É–π, –≤—ñ–¥—Å—Ç–µ–∂—É–π —Ç–∞ –¥–æ—Å—è–≥–∞–π —É—Å–ø—ñ—Ö—ñ–≤ —É —Å–≤–æ—ó—Ö —Ü—ñ–ª—è—Ö. –ü–æ—á–Ω–∏ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ!</p>
          <a href="#" className="btn-cta">–£–≤—ñ–π—Ç–∏</a>
        </div>
      </section>

      <Timer />

      <section className="goals-controls">
        <div className="filters">
          <button onClick={() => setFilter('all')}>–í—Å—ñ —Ü—ñ–ª—ñ</button>
          <button onClick={() => setFilter('active')}>–ê–∫—Ç–∏–≤–Ω—ñ</button>
          <button onClick={() => setFilter('completed')}>–ó–∞–≤–µ—Ä—à–µ–Ω—ñ</button>
          <button onClick={() => setFilter('postponed')}>–í—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ</button>
        </div>
        
      </section>

      <section className="goals-grid">
        {filteredGoals.length > 0 ? (
          filteredGoals.map(goal => (
            <GoalCard 
              key={goal.id}
              goal={goal}
              onToggleSubgoal={(subgoalId) => toggleSubgoal(goal.id, subgoalId)}
              onUpdateStatus={(updates) => updateGoalStatus(goal.id, updates)}
            />
          ))
        ) : (
          <p>–ù–µ–º–∞—î —Ü—ñ–ª–µ–π, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º</p>
        )}
      </section>

      <section className="benefits">
        <h2>–ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å?</h2>
        <div className="benefits-grid">
          <div className="benefit-card">
            <span>üìÖ</span>
            <h3>–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è</h3>
            <p>–õ–µ–≥–∫–æ –ø–ª–∞–Ω—É–π —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ —Ä–æ–∑–±–∏–≤–∞–π —ó—Ö –Ω–∞ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è.</p>
          </div>
          <div className="benefit-card">
            <span>üìä</span>
            <h3>–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è</h3>
            <p>–°–ª—ñ–¥–∫—É–π –∑–∞ —Å–≤–æ—ó–º –ø—Ä–æ–≥—Ä–µ—Å–æ–º —É –∑—Ä—É—á–Ω–æ–º—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ.</p>
          </div>
          <div className="benefit-card">
            <span>üë•</span>
            <h3>–°–ø—ñ–ª—å–Ω–æ—Ç–∞</h3>
            <p>–°–ø—ñ–ª–∫—É–π—Å—è –∑ –æ–¥–Ω–æ–¥—É–º—Ü—è–º–∏ —Ç–∞ –¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º–∏ —É—Å–ø—ñ—Ö–∞–º–∏.</p>
          </div>
        </div>
      </section>
    </>
  );
};

export default Home;